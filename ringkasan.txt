### Ringkasan Operasi PySpark dengan Window Functions

1. **Persiapan DataFrame**:
   Kita memulai dengan membuat sebuah DataFrame sederhana yang berisi data penjualan (`Sales`) per hari (`Date`) dari beberapa orang (`Name`). Data ini diolah menggunakan **PySpark** dengan membuat SparkSession dan kemudian mendefinisikan skema untuk DataFrame tersebut.

   ```python
   data = [
       ("Alice", "2024-09-01", 100),
       ("Alice", "2024-09-02", 200),
       ("Alice", "2024-09-03", 300),
       ("Bob", "2024-09-01", 150),
       ("Bob", "2024-09-02", 250),
       ("Bob", "2024-09-03", 350),
   ]
   ```

2. **Running Total**:
   Running total adalah jumlah kumulatif dari suatu kolom berdasarkan urutan tertentu. Di sini, kita menghitung total penjualan kumulatif untuk setiap orang berdasarkan urutan tanggal.

   Teknik yang digunakan:
   - **Window Partition**: Mengelompokkan data berdasarkan kolom `Name` (per orang).
   - **Order By**: Mengurutkan data per orang berdasarkan kolom `Date` (tanggal).
   - **rowsBetween**: Menentukan jendela dari awal data hingga baris saat ini untuk menghitung kumulatif.

   ```python
   windowSpec = Window.partitionBy("Name").orderBy("Date").rowsBetween(Window.unboundedPreceding, Window.currentRow)
   df_running_total = df.withColumn("Running_Total", F.sum("Sales").over(windowSpec))
   ```

   **Hasil**: Running total yang dihitung per orang akan menampilkan penjumlahan kumulatif penjualan setiap harinya.

3. **Ranking**:
   Perhitungan **rank** bertujuan untuk memberi peringkat terhadap setiap nilai di suatu kolom berdasarkan urutan tertentu. Dalam contoh ini, kita menghitung peringkat penjualan (`Sales`) untuk setiap orang, dari penjualan tertinggi hingga terendah.

   Teknik yang digunakan:
   - **Partition**: Mengelompokkan data berdasarkan `Name`.
   - **Order By**: Mengurutkan data per orang berdasarkan kolom `Sales` (penjualan) dalam urutan menurun.
   - **Rank Function**: Fungsi yang memberikan peringkat berdasarkan urutan tersebut.

   ```python
   windowSpecRank = Window.partitionBy("Name").orderBy(F.desc("Sales"))
   df_rank = df.withColumn("Rank", F.rank().over(windowSpecRank))
   ```

   **Hasil**: Setiap penjualan akan memiliki peringkat, di mana penjualan tertinggi mendapat peringkat 1.

4. **Dense Rank dan Row Number**:
   - **Dense Rank**: Mirip dengan `rank()`, namun tidak ada celah dalam penomoran peringkat.
   - **Row Number**: Memberikan nomor unik untuk setiap baris, meskipun nilainya sama.

   ```python
   df_dense_rank = df.withColumn("Dense_Rank", F.dense_rank().over(windowSpecRank))
   df_row_number = df.withColumn("Row_Number", F.row_number().over(windowSpecRank))
   ```

### Penerapan pada Proyek Data

Teknik **window functions** ini bisa diterapkan dalam berbagai proyek yang melibatkan data transaksi, penjualan, atau data sekuensial lainnya. Dalam proyek data barusan, kita bisa menggunakan teknik ini untuk:

1. **Menghitung Total Kumulatif**: Misalnya, menghitung total penjualan kumulatif per hari untuk setiap penjual atau wilayah penjualan.
   
2. **Memberikan Peringkat Penjualan**: Memberi peringkat pada setiap produk atau penjual berdasarkan total penjualan atau metrik lainnya, untuk keperluan analisis performa atau pelaporan.

3. **Analisis Temporal**: Menggunakan window function untuk menganalisis tren temporal, seperti penjualan bulanan kumulatif, peringkat penjualan mingguan, atau pertumbuhan penjualan secara bertahap.

Dengan PySpark, ini bisa dilakukan pada dataset besar dan terdistribusi, memungkinkan analisis skala besar dengan efisiensi yang tinggi.